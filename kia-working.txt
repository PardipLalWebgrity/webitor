
* New Structure Of Canvas Component
- events
-- click.js
-- input.js
- utils
-- methods.js
-- props.js
- tools
-- move.js
-- zoom.js
-- html-section.js
-- html-text.js
- workspace
-- layer.js
-- page.js
-- canvas.js
== WBTR.canvas.methods, WBTR.canvas.props, WBTR.canvas.tools.zoom.abc(), WBTR.canvas.workspace.layer.abc()

* Duplicate Page 
- already coded

* Layer select, show it dimension
- use ::before 

* all css style in css property & attribute in attr of layer object in layers objectStore store. because layer has if 10 property and loop on each can lag on page load.
- HTML = attr, css
- SVG = attr, css, sattr, scss


* A only function which handle to set css to active layers of canvas - active mean user select by click or by draging


* Select multiple layers
- when user drag selection, dont hide div, just remove bg color as transparent, when user move, internally move selection div, in selection div a function call, to move all selected layers


* 1st time when page load, ui component after load and frequently used component. Exceprt these components, in main component class - a list for stable component in array. Add a method in main component is disconnectedCallback, when component remove, this method clean memory. 

* Remove sleft & stop, which use for left & top. stay with official - left & top.

* Canvas's _drawCanvasHTMLAndCSS - HTML Tag, SVG Tag, Page, 

* add a function (selectElement) to main component to select element from shadow root ro replace "shadowRoot.querySelector"

* Add radio(s) as icon for devices at canvas top-center - Desktop, Mobile, Tab. Default is desktop. based on device, css added to later object

* Maintain z-index based on page, not whole canvas.

* In left sidebar, show layers in page wise, just like figma

* use css variable only for that which need to change like when mode change feom light to dark.

** below concept is for future. As much as possible we create css props category as minimum requirement of design. User use this concept to increase application concept
* user can register own properties
- Types px, color, dropdown, int
Note :- Assume, in future, there are a css property {childrens: 3;}. Even if parent has many children, but show only 3 childrens. Than user register own property as int just like {name: children, value: int, category: css-category-name}. In more-settings component dropdown. User has option to where to show this property in dropdown. On register css property time, user can also register css-property-category.

* May or Not, In more-settings popup, right side, a search icon, user click , a search input appear. User search border, all border related properties show like border-color, border-width, border-height